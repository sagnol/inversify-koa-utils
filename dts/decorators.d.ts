import { interfaces } from "./interfaces";
import { PARAMETER_TYPE } from "./constants";
export declare function Controller(path: string, ...middleware: interfaces.Middleware[]): (target: any) => void;
export declare function All(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function Get(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function Post(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function Put(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function Patch(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function Head(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function Delete(path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare function HttpMethod(method: string, path: string, ...middleware: interfaces.Middleware[]): interfaces.HandlerDecorator;
export declare const Request: (name?: string) => ParameterDecorator;
export declare const Response: (name?: string) => ParameterDecorator;
export declare const RequestParam: (name?: string) => ParameterDecorator;
export declare const QueryParam: (name?: string) => ParameterDecorator;
export declare const RequestBody: (name?: string) => ParameterDecorator;
export declare const RequestHeaders: (name?: string) => ParameterDecorator;
export declare const Cookies: (name?: string) => ParameterDecorator;
export declare const Next: (name?: string) => ParameterDecorator;
export declare const Context: (name?: string) => ParameterDecorator;
export declare function params(type: PARAMETER_TYPE, parameterName: string): (target: Object, methodName: string, index: number) => void;
